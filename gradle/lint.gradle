logger.lifecycle 'Enabling lint support in LensKit build'

ext.lintMode = 'disabled'
if (travis.isReleaseBuild()) {
    logger.lifecycle 'Travis build on release branch'
    ext.lintMode = 'enabled'
}
switch (getConfigProperty('lint', 'false').toLowerCase()) {
    case 'true':
        logger.info 'running in lint mode'
        ext.lintMode = 'enabled'
        break
    case 'preview':
        logger.info 'running in lint preview mode'
        ext.lintMode = 'preview'
        break
}

allprojects {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.7.7.201606060606'
    }
}

subprojects {
    tasks.withType(Test).all { t ->
        t.jacoco {
            enabled = travis.isActive() || lintMode != 'disabled'
        }
    }
    tasks.withType(JacocoReport).all { rpt ->
        rpt.reports {
            xml.enabled = true
        }
    }
}

task jacocoMergedReport(type: JacocoReport) {
    ext.projects = []
    onlyIf {
        travis.isActive() || lintMode != 'disabled'
    }
    for (prj in subprojects) {
        if (prj.name == 'lenskit-integration-tests') continue;
        projects << prj
        dependsOn prj.test
        sourceSets prj.sourceSets.main
        if (prj.sourceSets.test.allSource.files.isEmpty()) {
            logger.info '{} has no tests', prj.name
        } else {
            logger.info 'aggregating tests from {}', prj.name
            executionData prj.test
        }
    }
    reports {
        csv.enabled = false
        xml.enabled = true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.destination = "$reporting.baseDir/jacoco"
    }
}
report.dependsOn jacocoMergedReport
ciTest.dependsOn report

sonarqube {
    properties {
        property "sonar.projectKey", "lenskit"
        property "sonar.host.url", "https://sonarqube.com"
        property "sonar.sourceEncoding", "UTF-8"
        if (System.getenv("SONAR_TOKEN")) {
            property "sonar.login", System.getenv("SONAR_TOKEN")
        } else if (project.hasProperty('sonar.login')) {
            property "sonar.login", project.getProperty('sonar.login')
        }
        if (lintMode == 'preview') {
            logger.info 'configuring Sonar for preview mode'
            property "sonar.analysis.mode", "preview"
            property "sonar.issuesReport.html.enable", "true"
        }
    }
}

tasks.sonarqube.onlyIf {
    lintMode == 'preview' || (travis.isReleaseBuild() && travis.branch == 'master')
}

if (lintMode == 'enabled') {
    ciPublish.dependsOn 'sonarqube'
}
