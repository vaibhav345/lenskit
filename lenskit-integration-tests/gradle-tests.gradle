/*
 * Build system for LensKit, and open-source recommender systems toolkit.
 * Copyright 2010-2014 Regents of the University of Minnesota and contributors
 * Work on LensKit has been funded by the National Science Foundation under
 * grants IIS 05-34939, 08-08692, 08-12148, and 10-17697.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither the name of the University of Minnesota nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Integration tests built with Gradle.
 */
def ift = task makeTestRepo(group: 'build setup') {
    for (prj in rootProject.childProjects.values()) {
        if (prj.name =~ /^lenskit-(?!integration-tests)/) {
            dependsOn "$prj.path:installForTesting"
        }
    }
}

def testGradleVersions = ['2.2', '2.3', '2.4', '2.5', '2.6', '2.7',
                          '2.8', '2.9', '2.10', '2.11', '2.12']

task gradleTests(group: 'verification')
check.dependsOn gradleTests

file('src/it/gradle').eachDir { testDir ->
    def fname = testDir.name
    def tname = fname.replaceAll(/(?:^|-)(.)/) { m -> m[1].toUpperCase() }
    def workDir = file("build/gradle-tests/$fname")

    task("init$tname", type: Copy) {
        from 'src/it/gradle'
        include '*.gradle'
        include '*.properties'
        into workDir
    }

    task("copy$tname", type: Copy) {
        dependsOn "init$tname"
        from testDir
        into workDir
    }

    task("test$tname", type: GradleBuild, group: 'build test') {
        description "Run the ${testDir.name} test."
        dependsOn makeTestRepo, fetchData, processMLData
        dependsOn "copy$tname"
        mustRunAfter test
        mustRunAfter ':lenskit-gradle:check'
        // inputs.dir rootProject.file('build/test-repo')
        inputs.dir testDir
        inputs.files fileTree(workDir) {
            include '*.gradle'
        }
        inputs.dir "$buildDir/test-repo"
        outputs.dir workDir

        startParameter.searchUpwards = false
        startParameter.projectProperties = [
                testRepoURI: rootProject.uri("build/test-repo"),
                lenskitVersion: project.version,
                mlDataDir: mlDataDir,
                ratingsFile: "$mlDataDir/u.data"
        ]
        def props = new Properties()
        if (file("$testDir/gradle.properties").exists()) {
            file("$testDir/gradle.properties").withReader { r ->
                props.load(r)
            }
            if (props.getProperty("org.gradle.parallel") == 'true') {
                startParameter.setParallelProjectExecutionEnabled(true)
            }
        }
        dir = workDir
        buildFile = "$workDir/build.gradle"
        tasks = ['check']

        if (file("$testDir/verify.py").exists()) {
            dependsOn "checkPythonInstall"
            onlyIf {
                checkPythonInstall.isValid
            }
        }
        onlyIf {
            !file("$testDir/ignore").exists()
        }
        onlyIf {
            travis.branch != 'coverity_scan'
        }
    }

    gradleTests.dependsOn "test$tname"
}

tasks.testCliClasspath.dependsOn processMLData

task unpackOfflineRepo(type: Copy) {
    dependsOn rootProject.repoZip
    from zipTree(rootProject.repoZip.archivePath)
    into "$buildDir/offline-repo"
}
testEvalWithOfflineRepo {
    dependsOn unpackOfflineRepo
    startParameter.projectProperties['offlineRepoURI'] = uri("$buildDir/offline-repo/lenskit-repo-$version")
}

def basicGradleTest = 'src/it/gradle/gradle-plugin-basics'
def gradleTestWorkDir = "$buildDir/gradle-versions"
for (ver in testGradleVersions) {
    def workDir = "$gradleTestWorkDir/$ver"
    def prep = task("prepBasicGradle$ver", type: Copy) {
        ext.gradleVersion = ver
        from basicGradleTest
        into workDir
        from('src/it/gradle') {
            include 'common.gradle'
        }
        from(rootDir) {
            include 'gradlew'
            include 'gradlew.bat'
            include 'gradle/wrapper/gradle-wrapper.jar'
        }
        doLast {
            file("$workDir/gradle/wrapper/gradle-wrapper.properties").text = """\
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\\://services.gradle.org/distributions/gradle-$gradleVersion-bin.zip
""".stripIndent()
            file("$workDir/gradle.properties").text = """\
testRepoURI=${rootProject.uri("build/test-repo").toString().replaceAll(':', '\\:')}
lenskitVersion=${project.version}
"""
            file("$workDir/settings.gradle").text = ""
        }
    }
    def test = task("testBasicGradle$ver", type: Exec, dependsOn: [prep, makeTestRepo]) {
        workingDir workDir
        executable './gradlew'
        args 'check', '--stacktrace'
    }
    crossCheck.dependsOn test
}
