buildscript {
    repositories {
        maven {
            url project.testRepoURI
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.lenskit:lenskit-gradle:$project.lenskitVersion"
        classpath 'org.hamcrest:hamcrest-library:1.3'
    }
}

import org.gradle.process.internal.ExecException
import org.lenskit.gradle.*
import static org.hamcrest.MatcherAssert.assertThat
import static org.hamcrest.Matchers.*

apply plugin: 'java'
apply plugin: 'lenskit'
apply from: 'common.gradle'
apply from: 'renjin.gradle'

task checkPythonInstall {
    description 'Checks whether the Python install is valid'
    ext.isValid = false
    ext.shouldTry = true
    if (project.hasProperty('python.skip')) {
        ext.shouldTry = project.getProperty('python.skip').toLowerCase() != 'true'
    }

    onlyIf {
        shouldTry
    }

    doLast {
        try {
            exec {
                executable 'python'
                args '-V'
            }
            logger.info 'Your Python kit seems good'
            isValid = true
        } catch (IOException e) {
            logger.warn "Cannot run Python, assuming you don't have one"
        } catch (ExecException e) {
            logger.warn "Python starts, but is not usable"
        }
        if (System.getenv("CI") == "true" && !isValid) {
            logger.error "Python is not present, but required for CI builds"
            throw new IOException("cannot find Python")
        }
    }
}

task graphExternal(type: JavaExec) {
    classpath configurations.runtime
    main 'org.lenskit.cli.Main'
    args 'graph'
    args '-t', 'svg'
    args '-o', 'external-algorithm.svg'
    args 'external-algorithm.groovy'
}

task crossfold(type: Crossfold) {
    dependsOn checkPythonInstall
    onlyIf {
        checkPythonInstall.isValid
    }

    input textFile {
        file ratingsFile
        delimiter "\t"
    }
    outputFormat "gz"
    partitionCount 5
    userPartitionMethod holdout(5)
    includeTimestamps false
}

task trainTest(type: TrainTest) {
    dependsOn checkPythonInstall
    mustRunAfter graphExternal
    onlyIf {
        checkPythonInstall.isValid
    }

    logFile 'evaluate.log'
    logFileLevel 'DEBUG'

    maxMemory '256m'
    dataSet crossfold
    cacheDirectory 'cache'
    outputFile 'results.csv'
    userOutputFile 'users.csv'
    algorithm 'Baseline', 'internal-algorithm.groovy'
    algorithm 'External', 'external-algorithm.groovy'
    predict {
        outputFile 'predictions.csv'
        metric 'coverage'
        metric 'rmse'
    }
}

check.dependsOn graphExternal
verifyR.dependsOn trainTest
verifyR.doFirst {
    File resultsFile = file("results.csv")
    File userFile = file("users.csv")
    File predictFile = file("predictions.csv")

    assertThat("output file exists",
               resultsFile.exists());
    assertThat(resultsFile.readLines(), hasSize(11))
    assertThat("user output file exists",
               userFile.exists());
    assertThat("predict output file exists",
               predictFile.exists());
}
