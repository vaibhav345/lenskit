buildscript {
    repositories {
        maven {
            url project.testRepoURI
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.lenskit:lenskit-gradle:$project.lenskitVersion"
        classpath 'org.yaml:snakeyaml:1.17'
    }
}
import org.lenskit.gradle.*
import org.yaml.snakeyaml.*

apply plugin: 'java'
apply plugin: 'lenskit'
apply from: 'common.gradle'

dependencies {
    runtime 'org.hamcrest:hamcrest-library:1.3'
    runtime "org.lenskit:lenskit-test:$project.lenskitVersion"
    testRuntime 'com.xlson.groovycsv:groovycsv:1.0'
}

task crossfold(type: Crossfold) {
    input textFile {
        file ratingsFile
        delimiter "\t"
    }
    outputFormat "gz"
    partitionCount 5
    userPartitionMethod holdout(5)
    includeTimestamps false

    doLast {
        logger.info("creating runtime outputs")
        def parser = new Yaml()
        def cfFile = file("$outputDirectory/datasets.yaml")
        def cfSpec = parser.load(cfFile.text)
        for (int i = 0; i < 5; i++) {
            def trainf = file("$outputDirectory/part0${i+1}.train.yaml")
            def testf = file("$outputDirectory/part0${i+1}.test.yaml")
            def trainY = parser.load(trainf.text)
            def testY = parser.load(testf.text)
            testY.base_id = 100 * 1000 * 1000
            trainY << testY
            def rtf = file("$outputDirectory/part0${i+1}.runtime.yaml")
            rtf.text = parser.dump(trainY)

            cfSpec.datasets[i].runtime = rtf.name
        }
        cfFile.text = parser.dump(cfSpec)
    }
}

task trainTest(type: TrainTest) {
    maxMemory '256m'
    logFile "train-test.log"
    logFileLevel 'DEBUG'
    dataSet crossfold
    outputFile 'results.csv'
    algorithm 'Cheat', 'cheat.groovy'
    predict {
        outputFile 'predictions.csv.gz'
        metric 'coverage'
        metric 'rmse'
    }
}

apply from: 'renjin.gradle'
verifyR.dependsOn trainTest